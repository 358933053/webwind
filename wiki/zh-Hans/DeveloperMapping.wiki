#summary 处理URL

= 处理URL =

正如你看到的，WebWind不需要实现任何特定接口，可以在一个Class中定义多个方法，每一个带有@Mapping的方法都可以处理一个URL。

能够处理URL的方法必须满足：

  * 必须是public，并且不是static。
  * 必须返回void、String或org.expressme.wind.Renderer。
  * 方法参数必须被WebWind支持。参考[DeveloperMapping#%E6%94%AF%E6%8C%81%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B 支持的参数类型]。
  * 方法参数的个数要和URL中参数个数匹配。

方法可以抛出任何类型的异常。

= 定义URL =

WebWind在内部使用正则表达式来处理URL，不过，正则表达式不是那么容易编写，因此，WebWind使用易读的格式如`/user/$1/$2.html`来表示URL。

当你在URL中定义了参数后，WebWind就自动将URL的参数传递给方法参数。URL参数的占位符是`$`，索引从1开始，最多至9，因此，你可以最多传递9个参数。

每个`$n`（n=1至9）都将匹配URL的某一组值，包括空字符串，但是，不会匹配包含`/`的字符串，因此：

`/user/$1.html`将匹配`/user/123456.html`，但不会匹配`/user/123/456.html`。

因此，以下的URL定义是无效的：

  * /user/$2.html：因为$1没有找到。
  * /blog/$1/$3.html: 因为$2没有找到。

以下的URL定义是有效的，但不推荐使用：

  * /user/$1$2.html：因为$1永远匹配到空字符串。
  * $1.html：无法匹配到任何URL，因为URL总是以`/`开头。

URL中的参数将自动被转换为方法参数的合适类型。例如：

{{{
@Mapping("/user/$1/$2.html")
public void handle(long userId, int postId) throws Exception {
    // $1被转换为long，$2被转换为int...
}
}}}

= 支持的参数类型 =

不是所有的Java类型都能被转换，因为WebWind必须能够将String转换到正确的Java类型。内置的支持类型包括String和所有基本类型以及其包裹类型（int，Integer，boolean，Boolean等）：

|| 类型 || 转换方法 || 可能抛出异常 ||
|| java.lang.String || 无 || 无 ||
|| boolean, Boolean || Boolean.valueOf(String) || 无 ||
|| char, Character || String.charAt(0) || IllegalArgumentException ||
|| byte, Byte || Byte.parse(String) || NumberFormatException ||
|| short, Short || Short.parse(String) || NumberFormatException ||
|| int, Integer || Integer.parse(String) || NumberFormatException ||
|| long, Long || Long.parse(String) || NumberFormatException ||
|| float, Float || Float.parse(String) || NumberFormatException ||
|| double, Double || Double.parse(String) || NumberFormatException ||

TODO: How to add more types
