#summary WebWind配置

= 需求 =

WebWind需要：

  * Java 5或更高版本。
  * Servlet 2.4兼容的Web服务器（或更高版本）。
  * 一个IoC容器，例如[http://www.springsource.org/ Spring]或[http://code.google.com/p/google-guice/ Guice]。

WebWind不管理任何Web组件，而是从IoC容器中获取所有实例。

= 配置 =

WebWind的配置非常简单，请按照以下步骤：

== 在web.xml中声明DispatcherServlet ==

首先，请在web.xml中添加一个Servlet的声明：

{{{
<servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.expressme.webwind.DispatcherServlet</servlet-class>
    <init-param>
        <param-name>container</param-name>
        <param-value>Guice</param-value>
    </init-param>
    <init-param>
        <param-name>modules</param-name>
        <param-value>org.expressme.sample.BlogModule</param-value>
    </init-param>
    <init-param>
        <param-name>template</param-name>
        <param-value>Velocity</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
</servlet-mapping>
}}}

请注意，所有参数均是*大小写敏感*的。

参数“container”用于指定您使用的IoC容器，WebWind内置支持两种IoC容器：Spring和Guice。

如果希望使用其他IoC容器，可以指定完整的类名。请参考[DeveloperExtension#%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9IoC%E5%AE%B9%E5%99%A8 如何集成其他IoC容器].

参数template用于指定如何渲染页面，WebWind内置支持两种模板：Jsp和Velocity。

Jsp是缺省的模板。如果指定[http://velocity.apache.org/ Velocity]作为模板，则还需要在/WEB-INF/目录下放置一个velocity.properties的配置文件。

如果希望使用其他模板引擎，例如[http://freemarker.sourceforge.net/ FreeMarker]，请参考[DeveloperExtension#集成第三方模板引擎 如何集成第三方模板引擎]。

`<load-on-startup>`是标准的Servlet配置，设置为0可以强制Web服务器立即加载并初始化该Servlet。

非常重要的一点是，在servlet-mapping中，必须将“/”映射到DispatcherServlet。和[http://struts.apache.org/ Struts]（或其他MVC框架）映射`*.do`不同，WebWind让你完全控制并管理URL结构。以下URL均被支持：

  * /blog/display/20090909
  * /post/2009/09/09/12345.html
  * /user/1002/35af98c260_1.js

因此，必须将`/`映射到WebWind提供的DispatcherServlet。

如果你使用Guice作为IoC容器，则module参数是必须的，它指定了Guice需要的Module的完整类名。

如果你使用Spring作为IoC容器，则需要添加以下配置到web.xml中，以便在WebWind启动前加载Spring：

{{{
<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
}}}

Spring默认的配置文件`applicationContext.xml`必须放置到`/WEB-INF/`目录下。

以上就是所有的配置！无需额外的配置文件！

继续学习第一个[DeveloperHello 'Hello, world']应用程序。

== 另一种替代方案 ==

如果你已经将`/`映射到了某个Servlet，WebWind还提供了另一个DispatcherFilter，可以替代DispatcherServlet：

{{{
<filter>
    <filter-name>dispatcher</servlet-name>
    <filter-class>org.expressme.webwind.DispatcherFilter</servlet-class>
    <init-param>
        <param-name>container</param-name>
        <param-value>Guice</param-value>
    </init-param>
    <init-param>
        <param-name>modules</param-name>
        <param-value>org.expressme.sample.BlogModule</param-value>
    </init-param>
    <init-param>
        <param-name>template</param-name>
        <param-value>Velocity</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>dispatcher</servlet-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
}}}

区别在于：

  * 没有`<load-on-startup>`配置。
  * 参数`<url-pattern>`是`/*`而不是`/`。
